{
  "hash": "8ca8e5f9ec5643412818536baef698ab",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualising positional moves in chess\"\ndescription: \"Analysis of #TidyTuesday's chess dataset\"\ndate: \"2024-09-28\"\ntoc: true\nformat:\n  html:\n    page-layout: full\n    html-math-method: katex\n    code-tools: true\n    self-contained: true\n    code-fold: true\n    code-summary: \"Show the code\"\ncategories:\n  - TidyTuesday\n  - data visualisation\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n\nset.seed(321) # For reproducibility\n\n# Loading packages -------------------------------------------------------------\nlibrary(dplyr)            # Data manipulation\nlibrary(tidyr)            # Data pivoting\nlibrary(ggplot2)          # Visualisation\nlibrary(furrr)            # Parallel processing \nlibrary(kableExtra)       # Creating tables\nlibrary(rchess)           # Working with chess objects\nlibrary(ggeasy)           # Makes theming plots easier\n\n# Reading in data --------------------------------------------------------------\ndata <- tidytuesdayR::tt_load(2024, week = 40)\ndata <- data$chess\n```\n:::\n\n\n\nThis document analyzes a dataset of chess games from [Lichess](https://lichess.org/) provided by [#TidyTuesday](https://github.com/rfordatascience/tidytuesday). It contains over 20,000 games, including information such as player ratings, move sequences, and other metrics. The main focus of this analysis will be on the **specific moves played during each game**.\n\n# Chess Data\n\nThe dataset includes the move sequences made by each player, represented as a string of moves. Below is a preview of the first two rows of the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  select(game_id, moves) %>%\n  mutate(game_id = seq(1:nrow(data))) %>%\n  rename(ID = game_id, Moves = moves) %>%\n  head(n = 2) %>%\n  kbl(align = \"c\") %>%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> ID </th>\n   <th style=\"text-align:center;\"> Moves </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> d4 d5 c4 c6 cxd5 e6 dxe6 fxe6 Nf3 Bb4+ Nc3 Ba5 Bf4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> d4 Nc6 e4 e5 f4 f6 dxe5 fxe5 fxe5 Nxe5 Qd4 Nc6 Qe5+ Nxe5 c4 Bb4+ </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nEach row displays the move sequence for a game, starting with White's move. For example, the **Slav Defense** (1. d4 d5 2. c4 c6) or the **Nimzowitsch Defense** (1. d4 Nc6 2. e4 e5). Chess moves are typically recorded using [Portable Game Notation (PGN)](https://www.chess.com/terms/chess-pgn), which makes it easy to replicate games.\n\n## PGN Conversion\n\nTo facilitate further analysis, we will convert the raw move strings into the PGN format, using a custom `convert_to_pgn()` function that I wrote.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert moves into PGN format ------------------------------------------------\nconvert_to_pgn <- function(moves, game_id) {\n  \n  # Split the moves string into a list of individual moves\n  move_list <- strsplit(moves, \" \")[[1]]\n  \n  # Initialize an empty string for the PGN format\n  pgn <- \"\"\n  \n  # Loop through the moves two at a time (each move is a pair: white and black)\n  for (i in seq(1, length(move_list), by = 2)) {\n    \n    move_number <- (i + 1) / 2 # Move number calculation\n    \n    # Add both white's and black's moves, if available\n    if (i < length(move_list)) {\n      pgn <- paste0(pgn, move_number, \". \", move_list[i], \" \", move_list[i+1], \" \")\n    } else {  # In case the game ends on white's move (no black move)\n      pgn <- paste0(pgn, move_number, \". \", move_list[i])\n    }\n  }\n\n  # Returning pgn string\n  return(pgn)\n}\n\n# Converting moves into pgn format\nchess_games <- data %>%\n  select(game_id, moves) %>%\n  mutate(\n    game_id = seq(1:nrow(data)),\n    moves = mapply(convert_to_pgn, moves, game_id))\n\n# Displaying converted dataset\nchess_games %>%\n  rename(ID = game_id, Moves = moves) %>%\n  head(n = 2) %>%\n  kbl(align = \"c\") %>%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> ID </th>\n   <th style=\"text-align:center;\"> Moves </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 1. d4 d5 2. c4 c6 3. cxd5 e6 4. dxe6 fxe6 5. Nf3 Bb4+ 6. Nc3 Ba5 7. Bf4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 1. d4 Nc6 2. e4 e5 3. f4 f6 4. dxe5 fxe5 5. fxe5 Nxe5 6. Qd4 Nc6 7. Qe5+ Nxe5 8. c4 Bb4+ </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nNow that out data is in PGN format we can use the ``history_detail()`` from the ``rhcess`` package to extract the game history. However, as our dataset contains over 20,000 rows this will take some time. Hence, we will implement parallel processing using the ``furrr`` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to extract game history\n# process_moves <- function(p) {\n#   chss <- Chess$new()\n#   chss$load_pgn(p)\n#   chss$history_detail()\n# }\n# \n# # Converting pgn format to game history\n# chess_games <- chess_games %>%\n#   mutate(data = future_map(moves, process_moves)) %>%\n#   select(-moves) %>% \n#   tidyr::unnest(cols = c(data))\n# \n# # Displaying converted dataset\n# chess_games %>%\n#   rename(ID = game_id) %>%\n#   kbl(align = \"c\") %>%\n#   kable_styling(\n#     full_width = FALSE,\n#     bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"))\n```\n:::\n\n\n\n# Creating a chess board\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a chess board -------------------------------------------------------\nboard <- rchess:::.chessboarddata() %>%\n  tibble() %>%\n  select(cell, col, row, x, y, cc)\n\nboard %>%\n  ggplot() +\n  geom_tile(aes(x, y, fill = cc)) +\n  scale_fill_manual(values =  c(\"burlywood3\", \"burlywood4\")) + # Traditional board colours\n  theme_void() +\n  theme(axis.text = element_blank(), axis.ticks = element_blank()) +\n  easy_remove_legend()\n```\n\n::: {.cell-output-display}\n![Chess Board](index_files/figure-html/fig-chess-board-1.png){#fig-chess-board width=1152}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}