{
  "hash": "70d3b9bb1463b22bea55ee44f4a97796",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualising positional moves in chess\"\nsubtitle: \"Where do players move their chess pieces to\"\ndate: \"2024-09-28\"\nformat:\n  html:\n    page-layout: full\n    html-math-method: katex\ncategories:\n  - \"#TidyTuesday\"\n  - data visualisation\nimage: \"../thumbnails/tt_2024_w40_thumb.png\"\ncitation: \n  url: \"https://c-monaghan.github.io/posts/2024/2024-09-28-TT-W40/\"\nexecute: \n  warning: false\neditor: source\n---\n\n\n\n![The image displays the positional movements of major white chess pieces. Denser curves indicate that pieces are move often moved in that direction.](tt_2024_w40.png){#fig-position .lightbox}\nThis document analyzes a dataset of chess games from [Lichess](https://lichess.org/) provided by [#TidyTuesday](https://github.com/rfordatascience/tidytuesday). It contains over 20,000 games, including information such as player ratings, move sequences, and other metrics. The main focus of this analysis will be on the **specific moves played during each game**.\n\n# Setting up\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(321) # For reproducibility\n\n# Loading packages -------------------------------------------------------------\npacman::p_load(\n  tidyverse,        # Easily Install and Load the 'Tidyverse'\n  rchess,           # Working with chess PGN notation\n  ggtext,           # Improved Text Rendering Support for 'ggplot2'\n  showtext,         # Using Fonts More Easily in R Graphs\n  ggeasy,           # Makes theming plots easier\n  furrr,            # Parallel processing \n  glue,             # Interpreted String Literals\n  ggfx             # Pixel Filters for \"ggplot2\" and \"grid\"\n)\n\n# Visualization Parameters -----------------------------------------------------\n# Plot aesthetics\ntitle_col    <- \"gray20\"           \nsubtitle_col <- \"gray20\"     \ncaption_col  <- \"gray30\"   \ntext_col     <- \"gray20\"    \ncol_palette  <- paletteer::paletteer_d(\"peRReo::don\")[c(5,9)]\n\nchess_tiles <- c(\"burlywood3\", \"burlywood4\") # Traditional board colours\n\n# Icons\ntt <- str_glue(\"#TidyTuesday: { 2024 } Week { 40 } &bull; Source: Chess Game Dataset (Lichess)<br>\")\nli <- str_glue(\"<span style='font-family:fa6-brands'>&#xf08c;</span>\")\ngh <- str_glue(\"<span style='font-family:fa6-brands'>&#xf09b;</span>\")\n\n# Text\ntitle_text <- str_glue(\"Positional movements of major chess pieces\")\ncaption_text  <- str_glue(\"{tt} {li} c-monaghan &bull; {gh} c-monaghan &bull; #rstats #ggplot2\")\n# Fonts\nfont_add(\"fa6-brands\", here::here(\"fonts/6.4.2/Font Awesome 6 Brands-Regular-400.otf\"))\nfont_add_google(\"Oswald\", regular.wt = 400, family = \"title\")\nfont_add_google(\"Noto Sans\", regular.wt = 400, family = \"caption\")\nshowtext_auto(enable = TRUE)\n\n# Plot theme\ntheme_set(theme_void(base_size = 14, base_family = \"text\"))\n\ntheme_update(\n    plot.title.position   = \"plot\",\n    plot.caption.position = \"plot\",\n    legend.position       = 'plot',\n    panel.grid            = element_blank(),\n    strip.text            = element_text(size = 20, face = \"bold\", \n                                         margin = margin(0, 0, 2, 0)),\n    axis.text             = element_blank(),\n    axis.ticks            = element_blank()\n)\n\n# Variables --------------------------------------------------------------------\n# Paths\npath <- \"posts/2024/\"\nfolder <- \"2024-09-28-TT-W40/\"\n\n# White Pieces\nwhite_pieces <- c(\"a1 Rook\", \"b1 Knight\", \"c1 Bishop\", \"White Queen\",\n                  \"White King\", \"f1 Bishop\", \"g1 Knight\", \"h1 Rook\")\n\n# Reading in data --------------------------------------------------------------\ndata <- tidytuesdayR::tt_load(2024, week = 40)\ndata <- data$chess\n```\n:::\n\n\n\n# Chess Data\n\nThe dataset includes the move sequences made by each player, represented as a string of moves. Below is a preview of the first two rows of the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  select(game_id, moves) %>%\n  mutate(game_id = seq(1:nrow(data))) %>%\n  rename(ID = game_id, Moves = moves) %>%\n  head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n     ID Moves                                                           \n  <int> <chr>                                                           \n1     1 d4 d5 c4 c6 cxd5 e6 dxe6 fxe6 Nf3 Bb4+ Nc3 Ba5 Bf4              \n2     2 d4 Nc6 e4 e5 f4 f6 dxe5 fxe5 fxe5 Nxe5 Qd4 Nc6 Qe5+ Nxe5 c4 Bb4+\n```\n\n\n:::\n:::\n\n\n\nEach row displays the move sequence for a game, starting with White's move. For example, the **Slav Defense** (1. d4 d5 2. c4 c6) or the **Nimzowitsch Defense** (1. d4 Nc6 2. e4 e5). Chess moves are typically recorded using [Portable Game Notation (PGN)](https://www.chess.com/terms/chess-pgn), which makes it easy to replicate games. \n\n## PGN Conversion\n\nTo facilitate further analysis, we will convert the raw move strings into the PGN format, using a custom `convert_to_pgn()` function that I wrote.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert moves into PGN format ------------------------------------------------\nconvert_to_pgn <- function(moves, game_id) {\n  \n  # Split the moves string into a list of individual moves\n  move_list <- strsplit(moves, \" \")[[1]]\n  \n  # Initialize an empty string for the PGN format\n  pgn <- \"\"\n  \n  # Loop through the moves two at a time (each move is a pair: white and black)\n  for (i in seq(1, length(move_list), by = 2)) {\n    \n    move_number <- (i + 1) / 2 # Move number calculation\n    \n    # Add both white's and black's moves, if available\n    if (i < length(move_list)) {\n      pgn <- paste0(pgn, move_number, \". \", move_list[i], \" \", move_list[i+1], \" \")\n    } else {  # In case the game ends on white's move (no black move)\n      pgn <- paste0(pgn, move_number, \". \", move_list[i])\n    }\n  }\n\n  # Returning pgn string\n  return(pgn)\n}\n\n# Converting moves into pgn format\nchess_games <- data %>%\n  select(game_id, moves) %>%\n  mutate(\n    game_id = seq(1:nrow(data)),\n    moves = mapply(convert_to_pgn, moves, game_id))\n\n# Displaying converted dataset\nchess_games %>%\n  rename(ID = game_id, Moves = moves) %>%\n  head(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n     ID Moves                                                                   \n  <int> <chr>                                                                   \n1     1 \"1. d4 d5 2. c4 c6 3. cxd5 e6 4. dxe6 fxe6 5. Nf3 Bb4+ 6. Nc3 Ba5 7. Bf…\n2     2 \"1. d4 Nc6 2. e4 e5 3. f4 f6 4. dxe5 fxe5 5. fxe5 Nxe5 6. Qd4 Nc6 7. Qe…\n```\n\n\n:::\n:::\n\n\n\n## Extracting game history\n\nEven with parallel processing the below code takes extremely long to run when rendering in quarto (4+ hrs). In a normal R session it takes about 20 minutes. I am not quite sure as to why the time difference is so extreme. However, to make my life a little easier and so I'm not waiting for hours when I need to re-render this document I will be reading in the data that this code outputs from an excel file. \n\nHowever, for those interested I have left the parallel processing code below\n\n::: {.callout-note collapse=\"true}\n## Game history code\n\nNow that the data is in PGN format, we can use the `history_detail()` function from the `rhcess` package to extract the game history. However, because the dataset contains over 20,000 rows, processing every game sequentially would be time-consuming. To speed up this process, we will implement parallel processing using the `furrr` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to extract game history\nprocess_moves <- function(p) {\n  chss <- Chess$new()          # Initialize a new chess object\n  chss$load_pgn(p)             # Load the PGN notation into the chess object\n  chss$history_detail()        # Extract detailed history of the game\n}\n\nplan(multisession, workers = parallel::detectCores() - 1)\n\n# Parallel processing: Convert PGN format to game history\nchess_games <- chess_games %>%\n  mutate(data = future_map(moves, process_moves)) %>%\n  select(-moves) %>%\n  unnest(cols = c(data))\n```\n:::\n\n\n\nThe game history data contains 1,393,586 observations on both white and black's moves. For the purpose of analysis we are only interested in plotting white's moves. Additionally, we will sample 25,000 moves from white so as not to create an over-populated graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# White pieces\nwhite_pieces <- c(\n  \"a1 Rook\", \"b1 Knight\", \"c1 Bishop\", \"White Queen\", \n  \"White King\", \"f1 Bishop\", \"g1 Knight\", \"h1 Rook\")\n\nchess_games <- chess_games %>% \n  filter(piece %in% white_pieces) %>%\n  sample_n(25000)\n```\n:::\n\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchess_games <- readxl::read_xlsx(path = here::here(\"data/chess_history.xlsx\"))\n\nchess_games %>%\n  select(game_id, piece, from, to) %>%\n  head(n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  game_id piece       from  to   \n    <dbl> <chr>       <chr> <chr>\n1    7298 b1 Knight   b1    d2   \n2   16254 g1 Knight   e5    c4   \n3   19492 h1 Rook     h1    e1   \n4   10827 White Queen b6    e3   \n```\n\n\n:::\n:::\n\n\n\n# Positional Movements\n## Creating a chess board\n\nFirst, we will create a chessboard using `ggplot`. We can do this using the `.chessboard()` function, again from the `rchess` package. This function generates the grid and coordinates for each square which can piped into ggplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a chess board -------------------------------------------------------\nboard <- rchess:::.chessboarddata() %>%\n  tibble() %>%\n  select(cell, col, row, x, y, cc)\n\nboard %>%\n  head(n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  cell  col     row     x     y cc   \n  <chr> <chr> <int> <int> <int> <chr>\n1 a1    a         1     1     1 b    \n2 b1    b         1     2     1 w    \n3 c1    c         1     3     1 b    \n4 d1    d         1     4     1 w    \n```\n\n\n:::\n:::\n\n\n\n## Adding board movements\n\nNext, we will join the chessboard data with the game data to calculate the origin and destination of each piece movement. This allows us to visualize the trajectories of pieces as they move across the board.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join board data with game data to get move origin and destination \nchess_games <- chess_games %>%\n  left_join(board %>% rename(from = cell, x.from = x, y.from = y), by = \"from\") %>%\n  left_join(board %>%\n              rename(to = cell, x.to = x, y.to = y) %>% \n              select(-cc, -col, -row), # Exclude unnecessary columns\n            by = \"to\") %>%\n  mutate(x_gt_y = abs(x.to - x.from) > abs(y.to - y.from), # Check if x movement is greater than y\n         xy_sign = sign((x.to - x.from)*(y.to - y.from)) == 1, # Check if X and Y move in the same direction\n         x_gt_y_equal_xy_sign = x_gt_y == xy_sign) # Check if both conditions hold\n\n# Previewing\nchess_games %>%\n  select(piece, from, to, x.from, y.from, x.to, y.to) %>%\n  head(n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 7\n  piece       from  to    x.from y.from  x.to  y.to\n  <chr>       <chr> <chr>  <int>  <int> <int> <int>\n1 b1 Knight   b1    d2         2      1     4     2\n2 g1 Knight   e5    c4         5      5     3     4\n3 h1 Rook     h1    e1         8      1     5     1\n4 White Queen b6    e3         2      6     5     3\n```\n\n\n:::\n:::\n\n\n\n## Plotting piece movements\n\nNow we can visualize their paths on a chessboard.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- chess_games %>%\n  ggplot() +\n  \n  # Adding board data\n  geom_tile(data = board, aes(x, y, fill = cc)) +\n  \n  # Adding piece movement\n  geom_curve(\n    data = chess_games %>% filter(x_gt_y_equal_xy_sign),\n    aes(x = x.from, y = y.from, xend = x.to, yend = y.to),\n    position = position_jitter(width = 0.2, height = 0.2),\n    curvature = 0.50, angle = -45, alpha = 0.02, color = \"white\", \n    linewidth = 1.02) +\n  geom_curve(\n    data = chess_games %>% filter(!x_gt_y_equal_xy_sign),\n    aes(x = x.from, y = y.from, xend = x.to, yend = y.to),\n    position = position_jitter(width = 0.2, height = 0.2),\n    curvature = -0.50, angle = 45, alpha = 0.02, color = \"white\", \n    linewidth = 1.02) +\n  \n  # Labs\n  labs(\n    title = title_text,\n    caption = caption_text, \n    x = NULL,\n    y = NULL) +\n  \n  # Scales\n  scale_fill_manual(values = chess_tiles) +\n  coord_equal() +\n  \n  # Facet\n  facet_wrap(~ factor(piece, levels = white_pieces), ncol = 4) +\n  \n  # Theme\n  theme(\n    plot.title = element_text(\n      size = 50,\n      family = \"title\",\n      face = \"bold\",\n      colour = title_col,\n      lineheight = 1.1,\n      hjust = 0.5,\n      margin = margin(t = 5, b = 5)),\n    plot.caption = element_markdown(\n      size = rel(1.25),\n      family = \"caption\",\n      colour = caption_col,\n      lineheight = 1.1,\n      hjust = 0.5,\n      margin = margin(t = 5, b = 5))\n    )\n\np\n```\n\n::: {.cell-output-display}\n![Positional movements of major white chess pieces. Denser curves indicate that pieces are move often moved in that direction.](index_files/figure-html/piece-movement-1.png){fig-align='center' width=720}\n:::\n:::\n\n\n\n# Saving\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Saving plot\nggsave(\n  filename = here::here(path, folder, \"tt_2024_w40.png\"),\n  plot = p,\n  width = 7.5, \n  height = 5, \n  units = \"in\",\n  dpi = 320\n)\n\n# Thumbnail  \nmagick::image_read(here::here(path, folder, \"tt_2024_w40.png\")) |> \n  magick::image_resize(geometry = \"800\") |> \n  magick::image_write(here::here(path, \"thumbnails/tt_2024_w40_thumb.png\"))\n```\n:::\n\n\n<!--\nAdapted from Tom Mock's blog: https://github.com/jthomasmock/themockup-blog/blob/master/_R/footer.qmd\n-->\n\n## Appendix{.appendix}\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 11 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Ireland.utf8\n ctype    English_Ireland.utf8\n tz       Europe/Dublin\n date     2024-10-09\n pandoc   3.2 @ C:/Coding/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n quarto   1.5.57\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.4.1)\n forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.4.1)\n furrr       * 0.3.1   2022-08-15 [1] CRAN (R 4.4.1)\n future      * 1.34.0  2024-07-29 [1] CRAN (R 4.4.1)\n ggeasy      * 0.1.4   2023-03-12 [1] CRAN (R 4.4.1)\n ggfx        * 1.0.1   2022-08-22 [1] CRAN (R 4.4.1)\n ggplot2     * 3.5.1   2024-04-23 [1] CRAN (R 4.4.1)\n ggtext      * 0.1.2   2022-09-16 [1] CRAN (R 4.4.1)\n glue        * 1.7.0   2024-01-09 [1] CRAN (R 4.4.1)\n lubridate   * 1.9.3   2023-09-27 [1] CRAN (R 4.4.1)\n purrr       * 1.0.2   2023-08-10 [1] CRAN (R 4.4.1)\n rchess      * 0.1     2024-09-26 [1] Github (jbkunst/rchess@7982953)\n readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.4.1)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.4.1)\n showtext    * 0.9-7   2024-03-02 [1] CRAN (R 4.4.1)\n showtextdb  * 3.0     2020-06-04 [1] CRAN (R 4.4.1)\n stringr     * 1.5.1   2023-11-14 [1] CRAN (R 4.4.1)\n sysfonts    * 0.8.9   2024-03-02 [1] CRAN (R 4.4.1)\n tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.4.1)\n tidyr       * 1.3.1   2024-01-24 [1] CRAN (R 4.4.1)\n tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.4.1)\n\n [1] C:/Coding/R-4.4.1/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}